version: '3.8'

services:
  # Redis缓存（本地部署）
  redis:
    image: redis:7-alpine
    container_name: targetmanage-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - targetmanage-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: targetmanage-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://root:targetM123@10.0.4.11:3306/targetmanage
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - DEBUG=${DEBUG:-false}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - targetmanage-network

  # 前端管理界面
  admin-frontend:
    build:
      context: ./admin-frontend
      dockerfile: Dockerfile
    container_name: targetmanage-admin
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./admin-frontend:/app
      - /app/node_modules
    networks:
      - targetmanage-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: targetmanage-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - backend
      - admin-frontend
    networks:
      - targetmanage-network

volumes:
  redis_data:
    driver: local

networks:
  targetmanage-network:
    driver: bridge
